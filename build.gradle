import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
    id 'java-library'
    id 'net.ltgt.errorprone'        version '3.1.0'
    id 'com.github.spotbugs'        version '5.1.2'
    id 'nebula.release'             version '17.2.2'
}

group = 'com.pega.gcs'
description = "FringeUtils-Common"

apply from: "$rootDir/gradle/artifacts.gradle"
apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/pmd.gradle"
apply from: "$rootDir/gradle/checkstyle.gradle"
apply from: "$rootDir/gradle/spotbugs.gradle"
apply from: "$rootDir/gradle/publishing.gradle"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {

    errorprone("com.google.errorprone:error_prone_core:2.21.1")

    api 'com.esotericsoftware:kryo:5.5.0'
    api 'commons-io:commons-io:2.13.0'
    api 'commons-fileupload:commons-fileupload:1.5'
    api ('org.dom4j:dom4j:2.1.4') {
        exclude group: 'xpp3', module: 'xpp3'
    }
    api 'org.lz4:lz4-java:1.8.0'
    api 'org.apache.commons:commons-csv:1.10.0'
    api 'org.apache.commons:commons-lang3:3.13.0'
    api 'org.apache.commons:commons-text:1.10.0'
    api 'org.apache.commons:commons-compress:1.23.0'
    api 'org.tukaani:xz:1.9'
    
    api 'org.apache.logging.log4j:log4j-api:2.20.0'
    api 'org.apache.logging.log4j:log4j-core:2.20.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:-options']
    options.compilerArgs += ['-proc:none']
    // configure error prone
    options.errorprone.check("UnnecessaryParentheses", CheckSeverity.OFF)
}

tasks.withType(Javadoc) {
    failOnError = false
}

tasks.withType (Test) {
    maxParallelForks = 2

    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        classDumpDir = file("$buildDir/jacoco/${name}_ClassDump")
    }
}

task copyLicense(type: Copy) {
    from "LICENSE"
    into "$buildDir"
}

build.finalizedBy jacocoTestReport, jacocoTestCoverageVerification